#!/usr/bin/env ruby

require 'optparse'
require 'cgi'
require 'rubygems'
require 'twilio-ruby'
require 'dotenv'
Dotenv.load

# USAGE: ./bin/cmd --from "+34646446543" --to "+34646446543" --text "Esto es una prueba"

opts = {}
OptionParser.new do |opt|
  opt.on('--from FROM') { |o| opts[:from] = o }
  opt.on('--to TO')     { |o| opts[:to]   = o }
  opt.on('--text TEXT') { |o| opts[:text] = CGI.escape(o) }
end.parse!

def format(input)
  return (input.capitalize.rjust(10, ' ')) if input.kind_of?(String)
  return (input.to_s.rjust(2, '0')) if input.kind_of?(Integer)
end

def query(request, debounce = 5)
  time  = Time.now.utc
  call  = @client.calls.list.first {|call| call.sid == request.sid}
  delay = debounce - (Time.now.utc - time)
  sleep(delay) if delay > 0
  return(call)
end

def halt(call)
  call.update(status: 'completed')
end

def report(request)
  call = query(request)
  puts("#{format('duration')}: #{call.duration} secs")
end

def continue?(request, status, duration, lag=10)
  limit = Time.now.utc + duration - lag
  response = loop do
    call  = query(request)
    puts("#{format('status')}: #{call.status.capitalize}")
    break(true) if (status != call.status)
    if (status == 'completed')
      puts("#{format('status')}: Halt!")
      halt(call)
      break(false)
    end
    if (Time.now.utc > limit)
      puts("#{format('status')}: Halt!")
      halt(call)
      break(false)
    end
  end
  return(response)
end

begin
  @client = Twilio::REST::Client.new(ENV['TWILIO_ACCOUNT_SID'], ENV['TWILIO_AUTH_TOKEN'])
  params = {
    :record => true,
    :url   => "#{ENV['APP_URL']}/voice.xml?token=#{ENV['APP_TOKEN']}&text=#{opts[:text]}",
    :to    => opts[:to],
    :from  => opts[:from]
  }
  request = @client.calls.create(params)
rescue
  puts("#{format('error')}: The call couldn't be created")
end

begin
  puts("#{format('calling')}: #{params[:to]}")
  if continue?(request, 'queued', 20)
    if continue?(request, 'ringing', 20)
       continue?(request, 'in-progress', 40)
    end
  end
  report(request)
rescue
  puts("#{format('error')}: The call proccess failed")
end
