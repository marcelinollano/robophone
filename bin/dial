#!/usr/bin/env ruby

require 'cgi'
require 'rubygems'
require 'twilio-ruby'
require 'sequel'
require 'sqlite3'
require 'phonelib'
require 'dotenv'
Dotenv.load

require './db.rb'

story = Story.first(:id => ARGV[0])
text  = CGI.escape(story.text)

params = {
  :record => true,
  :url   => "#{ENV['APP_URL']}/voice.xml?token=#{ENV['APP_TOKEN']}&text=#{text}",
  :from  => ARGV[1],
  :to    => ARGV[2]
}

@client = Twilio::REST::Client.new(
  ENV['TWILIO_ACCOUNT_SID'],
  ENV['TWILIO_AUTH_TOKEN']
)

request = @client.calls.create(params)

def format(input)
  return (input.capitalize.rjust(10, ' ')) if input.kind_of?(String)
  return (input.to_s.rjust(2, '0')) if input.kind_of?(Integer)
end

def query(request, debounce = 5)
  time  = Time.now.utc
  call  = @client.calls.list.first {|call| call.sid == request.sid}
  delay = debounce - (Time.now.utc - time)
  sleep(delay) if delay > 0
  return(call)
end

def halt(call)
  call.update(status: 'completed')
end

def continue?(request, status, duration, lag=10)
  limit = Time.now.utc + duration - lag
  response = loop do
    call  = query(request)

    break(true) if (status != call.status)

    if (status == 'completed')
      halt(call)
      break(false)
    end

    if (Time.now.utc > limit)
      halt(call)
      break(false)
    end
  end

  return(response)
end

if continue?(request, 'queued', story.queued)
  if continue?(request, 'ringing', story.ringing)
     continue?(request, 'in-progress', story.in_progress)
  end
end
