#!/usr/bin/env ruby

require 'cgi'
require 'optparse'
require 'addressable/uri'
require 'rubygems'
require 'twilio-ruby'
require 'sequel'
require 'sqlite3'
require 'phonelib'
require 'curb'
require 'dotenv'
Dotenv.load

opts = {}
OptionParser.new do |opt|
  opt.on('--id ID') { |o| opts[:id] = o }
end.parse!

require './db.rb'
@story = Story.first(:id => opts[:id])
@text  = @story.text

# Methods

def ping(id)
  params = 'message={"channel":"/stories/'+id.to_s+'","data": ""}'
  Curl.post("#{ENV['APP_URL']}/faye", params)
end

def query(request, client, call)
  current_call = client.calls.list.first {|c| c.sid == request.sid}
  call.update(:status => current_call.status)
  ping(@story.id)
  return(current_call)
end

def update_call(request, client, call)
  current_call = query(request, client, call)

  recordings = client.recordings.list(call_sid: current_call.sid)
  if recordings[0]
    recording  = client.recordings(recordings[0].sid).fetch
    recording  = 'https://api.twilio.com' + recording.uri.sub!('.json', '.wav')
  end

  transcriptions = client.transcriptions.list(call_sid: current_call.sid)
  if transcriptions[0]
    transcription = client.transcriptions(transcriptions[0].sid).fetch
    transcription = 'https://api.twilio.com' + transcription.uri.sub!('.json', '.txt')
  end

  call.update({
    :duration   => current_call.duration,
    :recording  => recording ||= nil,
    :transcript => transcription ||= nil,
    :status     => current_call.status
  })

  ping(@story.id)
end

@story.calls.each_with_index do |call, i|
  next if call.contact.rings == 0
  next if call.transcript

  url = Addressable::URI.new
  url.query_values = {
    :text        => CGI.escape(@text),
    :language    => @story.language    ||= ENV['DEFAULT_LANGUAGE'],
    :record_time => @story.record_time ||= ENV['DEFAULT_RECORD_TIME'],
    :template    => i+1 < @story.calls.size ? 'intro' : 'outro'
  }
  url = "#{ENV['APP_URL']}/voice.xml?#{url.query}"

  params = {
    :url => url,
    :from   => @story.phone,
    :to     => call.contact.phone,
    :method => 'GET'
  }

  client = Twilio::REST::Client.new(
    ENV['TWILIO_ACCOUNT_SID'],
    ENV['TWILIO_AUTH_TOKEN']
  )

  request = client.calls.create(params)

  loop do
    current_call = query(request, client, call)
    ping(@story.id)
    break if (current_call.status == 'completed')
  end

  update_call(request, client, call)

  # TODO: Check opt-out here!

  rings = call.contact.rings
  rings = rings - 1 > 0 ? rings - 1 : 0
  call.contact.update(:rings => rings)
  ping(@story.id)

  @text = call.transcript unless call.transcript.strip.empty?
end
